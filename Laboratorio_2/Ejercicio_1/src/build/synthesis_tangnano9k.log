
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+1 (git sha1 b1a011138, x86_64-w64-mingw32-g++ 9.2.1 -Os)


-- Running command `read_verilog -sv ../design/AntiReboteSincronizado.sv ../design/ContadorPrueba.sv ../design/top.sv ; synth_gowin -top top -json top.json' --

1. Executing Verilog-2005 frontend: ../design/AntiReboteSincronizado.sv
Parsing SystemVerilog input from `../design/AntiReboteSincronizado.sv' to AST representation.
Generating RTLIL representation for module `\AntiReboteSincronizado'.
Note: Assuming pure combinatorial block at ../design/AntiReboteSincronizado.sv:23.5-30.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../design/ContadorPrueba.sv
Parsing SystemVerilog input from `../design/ContadorPrueba.sv' to AST representation.
Generating RTLIL representation for module `\ContadorPruebas'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../design/top.sv
Parsing SystemVerilog input from `../design/top.sv' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

4. Executing SYNTH_GOWIN pass.

4.1. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\__APICULA_LUT5'.
Generating RTLIL representation for module `\__APICULA_LUT6'.
Generating RTLIL representation for module `\__APICULA_LUT7'.
Generating RTLIL representation for module `\__APICULA_LUT8'.
Generating RTLIL representation for module `\MUX2'.
Generating RTLIL representation for module `\MUX2_LUT5'.
Generating RTLIL representation for module `\MUX2_LUT6'.
Generating RTLIL representation for module `\MUX2_LUT7'.
Generating RTLIL representation for module `\MUX2_LUT8'.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFFE'.
Generating RTLIL representation for module `\DFFS'.
Generating RTLIL representation for module `\DFFSE'.
Generating RTLIL representation for module `\DFFR'.
Generating RTLIL representation for module `\DFFRE'.
Generating RTLIL representation for module `\DFFP'.
Generating RTLIL representation for module `\DFFPE'.
Generating RTLIL representation for module `\DFFC'.
Generating RTLIL representation for module `\DFFCE'.
Generating RTLIL representation for module `\DFFN'.
Generating RTLIL representation for module `\DFFNE'.
Generating RTLIL representation for module `\DFFNS'.
Generating RTLIL representation for module `\DFFNSE'.
Generating RTLIL representation for module `\DFFNR'.
Generating RTLIL representation for module `\DFFNRE'.
Generating RTLIL representation for module `\DFFNP'.
Generating RTLIL representation for module `\DFFNPE'.
Generating RTLIL representation for module `\DFFNC'.
Generating RTLIL representation for module `\DFFNCE'.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\TBUF'.
Generating RTLIL representation for module `\IOBUF'.
Generating RTLIL representation for module `\TLVDS_OBUF'.
Generating RTLIL representation for module `\ODDR'.
Generating RTLIL representation for module `\ODDRC'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\ALU'.
Generating RTLIL representation for module `\RAM16S1'.
Generating RTLIL representation for module `\RAM16S2'.
Generating RTLIL representation for module `\RAM16S4'.
Generating RTLIL representation for module `\RAM16SDP1'.
Generating RTLIL representation for module `\RAM16SDP2'.
Generating RTLIL representation for module `\RAM16SDP4'.
Generating RTLIL representation for module `\SP'.
Generating RTLIL representation for module `\SPX9'.
Generating RTLIL representation for module `\SDP'.
Generating RTLIL representation for module `\SDPX9'.
Generating RTLIL representation for module `\DP'.
Generating RTLIL representation for module `\DPX9'.
Generating RTLIL representation for module `\rPLL'.
Generating RTLIL representation for module `\PLLVR'.
Generating RTLIL representation for module `\OSC'.
Generating RTLIL representation for module `\OSCZ'.
Generating RTLIL representation for module `\OSCF'.
Generating RTLIL representation for module `\OSCH'.
Successfully finished Verilog frontend.

4.2. Executing HIERARCHY pass (managing design hierarchy).

4.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \ContadorPruebas
Used module:     \AntiReboteSincronizado

4.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \ContadorPruebas
Used module:     \AntiReboteSincronizado
Removed 0 unused modules.

4.3. Executing PROC pass (convert processes to netlists).

4.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$238'.
Cleaned up 1 empty switch.

4.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$234 in module DFFNCE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$232 in module DFFNC.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$230 in module DFFNPE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$228 in module DFFNP.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$226 in module DFFNRE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$224 in module DFFNR.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$222 in module DFFNSE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$220 in module DFFNS.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$214 in module DFFCE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$212 in module DFFC.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$210 in module DFFPE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$208 in module DFFP.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$206 in module DFFRE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$204 in module DFFR.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$202 in module DFFSE.
Marked 1 switch rules as full_case in process $proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$200 in module DFFS.
Marked 1 switch rules as full_case in process $proc$../design/ContadorPrueba.sv:12$7 in module ContadorPruebas.
Marked 1 switch rules as full_case in process $proc$../design/AntiReboteSincronizado.sv:33$5 in module AntiReboteSincronizado.
Marked 1 switch rules as full_case in process $proc$../design/AntiReboteSincronizado.sv:23$3 in module AntiReboteSincronizado.
Removed a total of 0 dead cases.

4.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 26 assignments to connections.

4.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$235'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$231'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$229'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$227'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$225'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$223'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$221'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\DFFN.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$217'.
  Set init value: \Q = 1'0
Found init rule in `\DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$215'.
  Set init value: \Q = 1'0
Found init rule in `\DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$211'.
  Set init value: \Q = 1'1
Found init rule in `\DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$209'.
  Set init value: \Q = 1'1
Found init rule in `\DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$207'.
  Set init value: \Q = 1'0
Found init rule in `\DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$205'.
  Set init value: \Q = 1'0
Found init rule in `\DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$203'.
  Set init value: \Q = 1'1
Found init rule in `\DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$201'.
  Set init value: \Q = 1'1
Found init rule in `\DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$199'.
  Set init value: \Q = 1'0
Found init rule in `\DFF.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$197'.
  Set init value: \Q = 1'0

4.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \CLEAR in `\DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$234'.
Found async reset \CLEAR in `\DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$232'.
Found async reset \PRESET in `\DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$230'.
Found async reset \PRESET in `\DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$228'.
Found async reset \CLEAR in `\DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$214'.
Found async reset \CLEAR in `\DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$212'.
Found async reset \PRESET in `\DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$210'.
Found async reset \PRESET in `\DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$208'.
Found async reset \rst in `\ContadorPruebas.$proc$../design/ContadorPrueba.sv:12$7'.
Found async reset \rst in `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:33$5'.
Found async reset \rst in `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:16$1'.

4.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~20 debug messages>

4.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$238'.
Creating decoders for process `\DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$235'.
Creating decoders for process `\DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$233'.
Creating decoders for process `\DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$232'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$231'.
Creating decoders for process `\DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$229'.
Creating decoders for process `\DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$228'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$227'.
Creating decoders for process `\DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$226'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$225'.
Creating decoders for process `\DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$224'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$223'.
Creating decoders for process `\DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$222'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$221'.
Creating decoders for process `\DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$219'.
Creating decoders for process `\DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$218'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFN.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$217'.
Creating decoders for process `\DFFN.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:366$216'.
Creating decoders for process `\DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$215'.
Creating decoders for process `\DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$213'.
Creating decoders for process `\DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$212'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$211'.
Creating decoders for process `\DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$210'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$209'.
Creating decoders for process `\DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$208'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$207'.
Creating decoders for process `\DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$206'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$205'.
Creating decoders for process `\DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$204'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$203'.
Creating decoders for process `\DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$202'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$201'.
Creating decoders for process `\DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$200'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$199'.
Creating decoders for process `\DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$198'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFF.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$197'.
Creating decoders for process `\DFF.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:179$196'.
Creating decoders for process `\ContadorPruebas.$proc$../design/ContadorPrueba.sv:12$7'.
     1/2: $0\anteriorEN[0:0]
     2/2: $0\contador[7:0]
Creating decoders for process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:33$5'.
     1/2: $0\salidaSincronizada[0:0]
     2/2: $0\ff1[0:0]
Creating decoders for process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:23$3'.
     1/1: $1\salidaEstable[0:0]
Creating decoders for process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:16$1'.
     1/1: $0\salidaEstable[0:0]

4.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\AntiReboteSincronizado.\salidaEstable' from process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:23$3'.

4.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ALU.\C' using process `\ALU.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$238'.
  created direct connection (no actual register cell created).
Creating register for signal `\ALU.\S' using process `\ALU.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$238'.
  created direct connection (no actual register cell created).
Creating register for signal `\DFFNCE.\Q' using process `\DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$234'.
  created $adff cell `$procdff$331' with negative edge clock and positive level reset.
Creating register for signal `\DFFNC.\Q' using process `\DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$232'.
  created $adff cell `$procdff$332' with negative edge clock and positive level reset.
Creating register for signal `\DFFNPE.\Q' using process `\DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$230'.
  created $adff cell `$procdff$333' with negative edge clock and positive level reset.
Creating register for signal `\DFFNP.\Q' using process `\DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$228'.
  created $adff cell `$procdff$334' with negative edge clock and positive level reset.
Creating register for signal `\DFFNRE.\Q' using process `\DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$226'.
  created $dff cell `$procdff$335' with negative edge clock.
Creating register for signal `\DFFNR.\Q' using process `\DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$224'.
  created $dff cell `$procdff$336' with negative edge clock.
Creating register for signal `\DFFNSE.\Q' using process `\DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$222'.
  created $dff cell `$procdff$337' with negative edge clock.
Creating register for signal `\DFFNS.\Q' using process `\DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$220'.
  created $dff cell `$procdff$338' with negative edge clock.
Creating register for signal `\DFFNE.\Q' using process `\DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$218'.
  created $dff cell `$procdff$339' with negative edge clock.
Creating register for signal `\DFFN.\Q' using process `\DFFN.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:366$216'.
  created $dff cell `$procdff$340' with negative edge clock.
Creating register for signal `\DFFCE.\Q' using process `\DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$214'.
  created $adff cell `$procdff$341' with positive edge clock and positive level reset.
Creating register for signal `\DFFC.\Q' using process `\DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$212'.
  created $adff cell `$procdff$342' with positive edge clock and positive level reset.
Creating register for signal `\DFFPE.\Q' using process `\DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$210'.
  created $adff cell `$procdff$343' with positive edge clock and positive level reset.
Creating register for signal `\DFFP.\Q' using process `\DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$208'.
  created $adff cell `$procdff$344' with positive edge clock and positive level reset.
Creating register for signal `\DFFRE.\Q' using process `\DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$206'.
  created $dff cell `$procdff$345' with positive edge clock.
Creating register for signal `\DFFR.\Q' using process `\DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$204'.
  created $dff cell `$procdff$346' with positive edge clock.
Creating register for signal `\DFFSE.\Q' using process `\DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$202'.
  created $dff cell `$procdff$347' with positive edge clock.
Creating register for signal `\DFFS.\Q' using process `\DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$200'.
  created $dff cell `$procdff$348' with positive edge clock.
Creating register for signal `\DFFE.\Q' using process `\DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$198'.
  created $dff cell `$procdff$349' with positive edge clock.
Creating register for signal `\DFF.\Q' using process `\DFF.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:179$196'.
  created $dff cell `$procdff$350' with positive edge clock.
Creating register for signal `\ContadorPruebas.\contador' using process `\ContadorPruebas.$proc$../design/ContadorPrueba.sv:12$7'.
  created $adff cell `$procdff$351' with positive edge clock and negative level reset.
Creating register for signal `\ContadorPruebas.\anteriorEN' using process `\ContadorPruebas.$proc$../design/ContadorPrueba.sv:12$7'.
  created $adff cell `$procdff$352' with positive edge clock and negative level reset.
Creating register for signal `\AntiReboteSincronizado.\salidaSincronizada' using process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:33$5'.
  created $adff cell `$procdff$353' with positive edge clock and negative level reset.
Creating register for signal `\AntiReboteSincronizado.\ff1' using process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:33$5'.
  created $adff cell `$procdff$354' with positive edge clock and negative level reset.
Creating register for signal `\AntiReboteSincronizado.\salidaEstable' using process `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:16$1'.
  created $adff cell `$procdff$355' with positive edge clock and negative level reset.

4.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ALU.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$238'.
Removing empty process `DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$235'.
Found and cleaned up 1 empty switch in `\DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$234'.
Removing empty process `DFFNCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$234'.
Removing empty process `DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$233'.
Removing empty process `DFFNC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$232'.
Removing empty process `DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$231'.
Found and cleaned up 1 empty switch in `\DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$230'.
Removing empty process `DFFNPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$230'.
Removing empty process `DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$229'.
Removing empty process `DFFNP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$228'.
Removing empty process `DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$227'.
Found and cleaned up 2 empty switches in `\DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$226'.
Removing empty process `DFFNRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$226'.
Removing empty process `DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$225'.
Found and cleaned up 1 empty switch in `\DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$224'.
Removing empty process `DFFNR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$224'.
Removing empty process `DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$223'.
Found and cleaned up 2 empty switches in `\DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$222'.
Removing empty process `DFFNSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$222'.
Removing empty process `DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$221'.
Found and cleaned up 1 empty switch in `\DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$220'.
Removing empty process `DFFNS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$220'.
Removing empty process `DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$218'.
Removing empty process `DFFNE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$218'.
Removing empty process `DFFN.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$217'.
Removing empty process `DFFN.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:366$216'.
Removing empty process `DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$215'.
Found and cleaned up 1 empty switch in `\DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$214'.
Removing empty process `DFFCE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$214'.
Removing empty process `DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$213'.
Removing empty process `DFFC.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$212'.
Removing empty process `DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$211'.
Found and cleaned up 1 empty switch in `\DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$210'.
Removing empty process `DFFPE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$210'.
Removing empty process `DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$209'.
Removing empty process `DFFP.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$208'.
Removing empty process `DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$207'.
Found and cleaned up 2 empty switches in `\DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$206'.
Removing empty process `DFFRE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$206'.
Removing empty process `DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$205'.
Found and cleaned up 1 empty switch in `\DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$204'.
Removing empty process `DFFR.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$204'.
Removing empty process `DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$203'.
Found and cleaned up 2 empty switches in `\DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$202'.
Removing empty process `DFFSE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$202'.
Removing empty process `DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$201'.
Found and cleaned up 1 empty switch in `\DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$200'.
Removing empty process `DFFS.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$200'.
Removing empty process `DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$199'.
Found and cleaned up 1 empty switch in `\DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$198'.
Removing empty process `DFFE.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$198'.
Removing empty process `DFF.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$197'.
Removing empty process `DFF.$proc$C:\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:179$196'.
Found and cleaned up 1 empty switch in `\ContadorPruebas.$proc$../design/ContadorPrueba.sv:12$7'.
Removing empty process `ContadorPruebas.$proc$../design/ContadorPrueba.sv:12$7'.
Removing empty process `AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:33$5'.
Found and cleaned up 1 empty switch in `\AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:23$3'.
Removing empty process `AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:23$3'.
Removing empty process `AntiReboteSincronizado.$proc$../design/AntiReboteSincronizado.sv:16$1'.
Cleaned up 20 empty switches.

4.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module ContadorPruebas.
Optimizing module AntiReboteSincronizado.
<suppressed ~1 debug messages>

4.4. Executing FLATTEN pass (flatten design).
Deleting now unused module ContadorPruebas.
Deleting now unused module AntiReboteSincronizado.
<suppressed ~2 debug messages>

4.5. Executing TRIBUF pass.

4.6. Executing DEMINOUT pass (demote inout ports to input or output).

4.7. Executing SYNTH pass.

4.7.1. Executing PROC pass (convert processes to netlists).

4.7.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.7.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.7.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.7.1.4. Executing PROC_INIT pass (extract init attributes).

4.7.1.5. Executing PROC_ARST pass (detect async resets in processes).

4.7.1.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7.1.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7.1.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.7.1.9. Executing PROC_DFF pass (convert process syncs to FFs).

4.7.1.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.7.1.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.7.1.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 14 unused wires.
<suppressed ~4 debug messages>

4.7.4. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: multiple conflicting drivers for top.\u_AntiReboteSincronizado.salidaEstable:
    port Q[0] of cell $flatten\u_AntiReboteSincronizado.$procdff$355 ($adff)
    port Y[0] of cell $flatten\u_AntiReboteSincronizado.$procmux$329 ($mux)
Found and reported 1 problems.

4.7.5. Executing OPT pass (performing simple optimizations).

4.7.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.7.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.7.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.5.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

4.7.5.9. Rerunning OPT passes. (Maybe there is more to do..)

4.7.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.7.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.5.13. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $flatten\u_AntiReboteSincronizado.$procdff$354 ($adff) from module top (removing D path).
Setting constant 0-bit at position 0 on $flatten\u_AntiReboteSincronizado.$procdff$354 ($dlatch) from module top.

4.7.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

4.7.5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.5.16. Rerunning OPT passes. (Maybe there is more to do..)

4.7.5.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.7.5.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.5.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.5.20. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $flatten\u_ContadorPruebas.$procdff$351 ($adff) from module top (removing D path).
Setting constant 0-bit at position 0 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 1 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 2 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 3 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 4 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 5 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 6 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.
Setting constant 0-bit at position 7 on $flatten\u_ContadorPruebas.$procdff$351 ($dlatch) from module top.

4.7.5.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.5.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

4.7.5.23. Rerunning OPT passes. (Maybe there is more to do..)

4.7.5.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.7.5.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.5.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.5.27. Executing OPT_DFF pass (perform DFF optimizations).

4.7.5.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.5.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.5.30. Finished OPT passes. (There is nothing left to do.)

4.7.6. Executing FSM pass (extract and optimize FSM).

4.7.6.1. Executing FSM_DETECT pass (finding FSMs in design).

4.7.6.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.7.6.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.7.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.6.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.7.6.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.7.6.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.7.6.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.7.7. Executing OPT pass (performing simple optimizations).

4.7.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.7.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.7.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.7.9. Finished OPT passes. (There is nothing left to do.)

4.7.8. Executing WREDUCE pass (reducing word size of cells).

4.7.9. Executing PEEPOPT pass (run peephole optimizers).

4.7.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

4.7.12. Executing SHARE pass (SAT-based resource sharing).

4.7.13. Executing OPT pass (performing simple optimizations).

4.7.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.7.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.13.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.7.13.9. Finished OPT passes. (There is nothing left to do.)

4.7.14. Executing MEMORY pass.

4.7.14.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.7.14.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.7.14.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.7.14.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.7.14.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.7.14.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.14.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.7.14.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.7.14.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.14.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.7.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.8. Executing MEMORY_LIBMAP pass (mapping memories to cells).

4.9. Executing TECHMAP pass (map to technology primitives).

4.9.1. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/gowin/lutrams_map.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/gowin/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__GOWIN_LUTRAM_'.
Successfully finished Verilog frontend.

4.9.2. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/gowin/brams_map.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/gowin/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__GOWIN_SP_'.
Generating RTLIL representation for module `\$__GOWIN_DP_'.
Generating RTLIL representation for module `\$__GOWIN_SDP_'.
Successfully finished Verilog frontend.

4.9.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.10.3. Executing OPT_DFF pass (perform DFF optimizations).

4.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.10.5. Finished fast OPT passes.

4.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.12. Executing OPT pass (performing simple optimizations).

4.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.12.6. Executing OPT_DFF pass (perform DFF optimizations).

4.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.12.9. Finished OPT passes. (There is nothing left to do.)

4.13. Executing TECHMAP pass (map to technology primitives).

4.13.1. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/techmap.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.13.2. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/gowin/arith_map.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/gowin/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_gw1n_alu'.
Successfully finished Verilog frontend.

4.13.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.14.3. Executing OPT_DFF pass (perform DFF optimizations).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.14.5. Finished fast OPT passes.

4.15. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port top.clk using IBUF.
Mapping port top.leds using OBUF.
Mapping port top.pulsador using IBUF.
Mapping port top.rst using IBUF.

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.17. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

4.18. Executing TECHMAP pass (map to technology primitives).

4.18.1. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~23 debug messages>

4.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.20. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.21. Executing ABC pass (technology mapping using ABC).

4.21.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

4.22. Executing TECHMAP pass (map to technology primitives).

4.22.1. Executing Verilog-2005 frontend: C:\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v
Parsing Verilog input from `C:\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.22.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~23 debug messages>

4.23. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in top.

4.24. Executing SETUNDEF pass (replace undef values with defined constants).

4.25. Executing HILOMAP pass (mapping to constant drivers).
Removed 1 unused cells and 1 unused wires.

4.26. Executing AUTONAME pass.
Renamed 17 objects in module top (5 iterations).
<suppressed ~13 debug messages>

4.27. Executing HIERARCHY pass (managing design hierarchy).

4.27.1. Analyzing design hierarchy..
Top module:  \top

4.27.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4.28. Printing statistics.

=== top ===

   Number of wires:                 18
   Number of wire bits:             39
   Number of public wires:          18
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     IBUF                            3
     OBUF                            8
     VCC                             1

4.29. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

4.30. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 817c9e04c4
Yosys 0.26+1 (git sha1 b1a011138, x86_64-w64-mingw32-g++ 9.2.1 -Os)
Time spent: 1% 17x opt_expr (0 sec), 1% 16x opt_clean (0 sec), ...
